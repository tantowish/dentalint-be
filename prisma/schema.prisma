// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JenisKelamin {
  P
  L
}

enum GolonganDarah {
  O
  AB
  A
  B
}

enum Classification {
  healthy
  caries
}

enum AppointmentSchedule {
  new
  reschedule
}

model User {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Capture    Capture[]
  DailyNote  DailyNote[]
  Pasien     Patient[]

  @@map("users")
}

model Capture {
  id         Int            @id @default(autoincrement())
  user_id    Int
  user       User           @relation(fields: [user_id], references: [id])
  image      String         @db.VarChar(255)
  class      Classification
  result     String         @db.Text()
  created_at DateTime       @default(now())

  @@map("captures")
}

model DailyNote {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  title      String   @default("toothbrushing") @db.VarChar(255)
  times      String[]
  fnb        String   @db.Text()
  note       String?  @db.Text()
  created_at DateTime @default(now())

  @@map("notes")
}

model Blog {
  id         String   @id @default(uuid())
  title      String   @db.VarChar(255)
  image      String   @db.VarChar(255)
  source     String   @db.VarChar(255)
  content    String   @db.Text()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("blogs")
}

model Patient {
  rekam_medis    String        @id @db.VarChar(255)
  user_id        Int
  user           User          @relation(fields: [user_id], references: [id])
  clinic_id      Int
  clinic         Clinic        @relation(fields: [clinic_id], references: [id])
  name           String        @db.VarChar(255)
  nik            String        @db.VarChar(16)
  jenis_kelamin  JenisKelamin
  golongan_darah GolonganDarah
  tempat_lahir   String        @db.VarChar(255)
  tanggal_lahir  DateTime
  alamat         String        @db.Text()
  no_hp          String        @db.VarChar(13)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  Appoinment     Appoinment[]

  @@map("patients")
}

model Clinic {
  id          Int          @id @default(autoincrement())
  clinic_name String       @db.VarChar(255)
  latitude    String       @db.VarChar(255)
  longitude   String       @db.VarChar(255)
  logo        String       @db.VarChar(255)
  address     String       @db.Text()
  link        String       @db.VarChar(255)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Appoinment  Appoinment[]
  Patient     Patient[]

  @@map("clinics")
}

model Appoinment {
  no_antrian  String              @id @db.VarChar(10)
  rekam_medis String
  patient     Patient             @relation(fields: [rekam_medis], references: [rekam_medis])
  clinic_id   Int
  clinic      Clinic              @relation(fields: [clinic_id], references: [id])
  schedule    DateTime
  status      AppointmentSchedule
  polyclinic  String              @db.VarChar(255)
  payment     String              @db.VarChar(255)
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt

  @@map("appointments")
}
